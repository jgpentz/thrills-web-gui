# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

variables:

  PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic"
  OUTPUT_PREFIX: "Thrills_Web_Gui"
  PACKAGE_RELEASE_NAME: "${OUTPUT_PREFIX}_${CI_COMMIT_TAG}"
  POST_URL_PRE: "${PACKAGE_REGISTRY_URL}/Thrills_Gui_App/${CI_COMMIT_TAG}"
  PACKAGE_FILENAME: "${PACKAGE_RELEASE_NAME}.tar.gz"
  POST_URL: "${POST_URL_PRE}/${PACKAGE_FILENAME}"

stages:          # List of stages for jobs, and their order of execution
  - build
  - tagged-release

build-job:       # This job runs in the build stage, which runs first.
  image: node:latest
  tags:
    - docker
  stage: build
  script:
    - echo "Installing npm..."
    - npm install
    - echo "Npm installed."
    - npm list
    - echo "Building the code..."
    - CI=false npm run build
    - echo "Compile complete."
  artifacts:
    paths:
      - build
    expire_in: never

Release Tagged Version:
  tags:
    - docker
  image: gitlab.firstrf.com:5050/docker/gitlabreleasecli:v1.0.0
  needs:
    - job: build-job
      artifacts: true
  stage: tagged-release
  before_script:
    - echo "Releasing web gui" 
  script:  # Save files to the generic package repo for release staging
    # Create variables to pass to Release Job
    - ls -lah build
    - echo "Zipping up build dir..."
    - mv build thrills-web-gui
    - tar -cvzf ${PACKAGE_FILENAME} thrills-web-gui
    - echo "Uploading to Package Registry..."    
    - >
        curl -s -S --fail --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file "${PACKAGE_FILENAME}" "${POST_URL}"
  rules:
    - if: $CI_COMMIT_TAG # Upload any tagged version to generic package repo regardless of name
      when: on_success # Only run if previous stages passed
